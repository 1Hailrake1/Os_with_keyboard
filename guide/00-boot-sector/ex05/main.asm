; ========================== BOOT SECTOR / ex05 / main =========================
; Простая программа загрузочного сектора (boot sector), которая выводит на экран
; строку с помощью функции
; ------------------------------------------------------------------------------
; Кратко о том, как работают функции:
; Чтобы вызвать функцию, используется команда call <метка>. Чтобы выйти из
; функции, используется команда ret.
; Команды call и ret используются в паре. Команда call помещает регистр EIP
; (указатель на следующюю команду, которая должна быть выполнена) в стек, а 
; команда ret извлекает его и передаёт управление этому адресу. Вы также можете 
; определить аргументы, для вызываемой программы (процедуры). Это можно сделать 
; через стек, т.е. перед вызовом функции занести в стек параметры, а в теле
; функции извлечь их.
; ------------------------------------------------------------------------------
; Чтобы перевести наш файл boot_sect.asm в машинный код, нужно написать:
; nasm boot_sect.asm -f bin -o boot_sect.bin
; ------------------------------------------------------------------------------
; Справочник по синтаксису ассемблера NASM можно найти тут: 
; https://www.opennet.ru/docs/RUS/nasm/nasm_ru3.html

[org 0x7c00]

mov bx, HELLO_MSG				; Перемещаем объявленную нами ниже строку в
								; регистр bx. В ассемблере строки представляют
								; из себя то же, что и строки в Си - идущие друг
								; за другом ячейки памяти, в которых занесено 
								; значение символов этой строки, поэтому в bx
								; в данный момент находится первый символ строки
								; (а точнее его ASCII код) Строка в ассемблере
								; также нуль-терминирована (т.е. заканчивается 
								; нулем).

call print_string				; вызываем функцию print_string с помощью
								; команды call

mov bx, GOODBYE_MSG
call print_string

jmp $							; бесконечный цикл

%include "print_string.asm"		; директива %include вставляет весь код из
								; файла print_string.asm в место, откуда она
								; была вызвана.

HELLO_MSG:
	db "Hello, world!", 0		; Объявляем байты, содержащие строку с 
								; приветствием, заканчивающуюся нулем.
								; На самом деле эти байты размещаются прямо в
								; исполняемом файле, откомпилированном с помощью
								; nasm. Вот так вот.

GOODBYE_MSG:
	db "Goodbye!", 0

times 510-($-$$) db 0			; Заполняем ненужные байты нулями
dw 0xaa55						; Вставляем в конец "магическое число"